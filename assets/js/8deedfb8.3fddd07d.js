"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[556],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var d=a.createContext({}),m=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=m(e.components);return a.createElement(d.Provider,{value:t},e.children)},p="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,d=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=m(n),c=l,k=p["".concat(d,".").concat(c)]||p[c]||s[c]||i;return n?a.createElement(k,r(r({ref:t},u),{},{components:n})):a.createElement(k,r({ref:t},u))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,r=new Array(i);r[0]=c;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o[p]="string"==typeof e?e:l,r[1]=o;for(var m=2;m<i;m++)r[m]=n[m];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},52157:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var a=n(87462),l=(n(67294),n(3905));const i={},r="Changelog",o={type:"mdx",permalink:"/colour-utils/CHANGELOG",source:"@site/pages/CHANGELOG.md",title:"Changelog",description:"[1.4.1]",frontMatter:{}},d=[{value:"1.4.1",id:"141",level:2},{value:"Added",id:"added",level:3},{value:"Fixed",id:"fixed",level:3},{value:"Changed",id:"changed",level:3},{value:"1.3.1",id:"131",level:2},{value:"1.3.0",id:"130",level:2},{value:"Added",id:"added-1",level:3},{value:"Changed",id:"changed-1",level:3},{value:"1.2.0",id:"120",level:2},{value:"Added",id:"added-2",level:3},{value:"Changed",id:"changed-2",level:3},{value:"Removed",id:"removed",level:3},{value:"1.1.1",id:"111",level:2},{value:"Added",id:"added-3",level:3},{value:"1.1.0",id:"110",level:2},{value:"Added",id:"added-4",level:3},{value:"1.0.3",id:"103",level:2},{value:"Added",id:"added-5",level:3},{value:"1.0.2",id:"102",level:2},{value:"Added",id:"added-6",level:3},{value:"1.0.1",id:"101",level:2},{value:"Added",id:"added-7",level:3}],m={toc:d},u="wrapper";function p(e){let{components:t,...n}=e;return(0,l.kt)(u,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"changelog"},"Changelog"),(0,l.kt)("h2",{id:"141"},"[1.4.1]"),(0,l.kt)("h3",{id:"added"},"Added"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Implemented ",(0,l.kt)("inlineCode",{parentName:"li"},"Palette.Nearest")," method, which returns the nearest colour in a\npalette to a given colour."),(0,l.kt)("li",{parentName:"ul"},"Implemented ",(0,l.kt)("inlineCode",{parentName:"li"},"LAB.Lerp")," method, which returns a colour between two colours in\nthe LAB colour space."),(0,l.kt)("li",{parentName:"ul"},"Missing TypeScript types for new methods and ",(0,l.kt)("inlineCode",{parentName:"li"},"Hex.fromHexRGBA"),"."),(0,l.kt)("li",{parentName:"ul"},"CI workflow to ensure code is formatted and linted correctly.")),(0,l.kt)("h3",{id:"fixed"},"Fixed"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Due to a typo, the ",(0,l.kt)("inlineCode",{parentName:"li"},"APCA.GetContrastRatio")," method was throwing an error when\nattempting to calculate the contrast ratio for certain colours.")),(0,l.kt)("h3",{id:"changed"},"Changed"),(0,l.kt)("p",null,"All deprecated methods will output warnings to the console when used for the\nfirst time. This is to help users migrate to the new methods."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"This project's toolchain is now managed by aftman. Use of foreman is not recommended."),(0,l.kt)("li",{parentName:"ul"},'All instances of the word "colour" have been changed to "color" to match the\nUS spelling and keep consistency with the Roblox API.'),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ColorUtils.Emphasise")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"ColorUtils.GetContrastingColour")," are now marked as\ndeprecated for the same reason as above."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ColorUtils.GetContrastingColor")," is now marked as deprecated. The ",(0,l.kt)("inlineCode",{parentName:"li"},"WCAG"),"\nsubmodule should be used instead, since both ",(0,l.kt)("inlineCode",{parentName:"li"},"APCA")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"WCAG")," provide two\ndifferent methods for calculating contrast ratio."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ColorUtils.GetContrastRatio")," is now marked as deprecated and implements a\ncompatibility layer. Previously this was a redirect to ",(0,l.kt)("inlineCode",{parentName:"li"},"WCAG.GetContrastRatio"),"\nbut now it will use ",(0,l.kt)("inlineCode",{parentName:"li"},"APCA.GetContrastRatio")," because it is more accurate. ",(0,l.kt)("inlineCode",{parentName:"li"},"WCAG"),"\nvalues (",(0,l.kt)("inlineCode",{parentName:"li"},"0-21"),") will be returned for backwards compatibility until the method is\nremoved in a future release."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Palette.Tailwind")," will now produce a darker 950 shade, in line with\n",(0,l.kt)("a",{parentName:"li",href:"https://tailwindcss.com/docs/customizing-colors"},"Tailwind v3.3.2"),". Note that the\ngenerated palette will be slightly different to tailwind's, since the algorithm\nused to generate the palette is different.")),(0,l.kt)("h2",{id:"131"},"[1.3.1]"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Implemented transparency blending:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"This returns a new Color3 that acts as if it was overlaid on a background\ncolor with a given alpha."))),(0,l.kt)("li",{parentName:"ul"},"Added ",(0,l.kt)("inlineCode",{parentName:"li"},"Hex.fromHexRGBA"),", which converts a hex string with an alpha channel to\na Color3.")),(0,l.kt)("h2",{id:"130"},"[1.3.0]"),(0,l.kt)("h3",{id:"added-1"},"Added"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Implemented colour space conversions.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"HSL")," (",(0,l.kt)("inlineCode",{parentName:"li"},".fromHSL, .toHSL"),")."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"LAB")," (",(0,l.kt)("inlineCode",{parentName:"li"},".fromLAB, .toLAB"),") ",(0,l.kt)("em",{parentName:"li"},"(\ud83e\uddea experimental)"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"LCH")," (",(0,l.kt)("inlineCode",{parentName:"li"},".fromLCH, .toLCH"),") ",(0,l.kt)("em",{parentName:"li"},"(\ud83e\uddea experimental)"),"."))),(0,l.kt)("li",{parentName:"ul"},"Saturation methods to either saturate or desaturate a colour."),(0,l.kt)("li",{parentName:"ul"},"Tailwind CSS-style palette generator - Generates 10 swatches, given a base\ncolour, and returns a ",(0,l.kt)("inlineCode",{parentName:"li"},"TailwindPalette")," object (see the docs for more details).")),(0,l.kt)("h3",{id:"changed-1"},"Changed"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Updated the docs for Hex and Int. The converter methods were previously\ndocumented in PascalCase, but they should have been documented in camelCase."),(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"Palette.Monochromatic")," method now accepts an optional second parameter,\n",(0,l.kt)("inlineCode",{parentName:"li"},"swatches"),", which defaults to ",(0,l.kt)("inlineCode",{parentName:"li"},"3"),". This is to allow for more control over the\nnumber of swatches generated.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"\u26a0\ufe0f Warning:")," The behaviour of monochromatic has been changed to\nallow for more control over the number of swatches generated."),(0,l.kt)("li",{parentName:"ul"},"The new behaviour will return ",(0,l.kt)("inlineCode",{parentName:"li"},"X")," amount of swatches, ",(0,l.kt)("strong",{parentName:"li"},"including")," the base\ncolour. The results do not necessarily include a single lighter and darker\nswatch, and the resulting array is now sorted from darkest to lightest (most\nvibrant).")))),(0,l.kt)("h2",{id:"120"},"[1.2.0]"),(0,l.kt)("h3",{id:"added-2"},"Added"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"WCAG")," submodule to house the current ",(0,l.kt)("inlineCode",{parentName:"li"},".GetContrastRatio")," and ",(0,l.kt)("inlineCode",{parentName:"li"},".GetContrastingColour"),"\nmethods."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"APCA")," submodule, which contains an updated version of ",(0,l.kt)("inlineCode",{parentName:"li"},".GetContrastRatio"),"."),(0,l.kt)("li",{parentName:"ul"},"Implemented colour blindness simulation under the ",(0,l.kt)("inlineCode",{parentName:"li"},"Blind")," submodule.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Supports the Trichroma-, Protan-, Deutan-, Tritan- and Achroma- groups."),(0,l.kt)("li",{parentName:"ul"},'Includes friendly "',(0,l.kt)("inlineCode",{parentName:"li"},"Enums"),'" for non-scientists.'))),(0,l.kt)("li",{parentName:"ul"},"Documentation site using ",(0,l.kt)("a",{parentName:"li",href:"https://upliftgames.github.io/moonwave/"},"moonwave"),"."),(0,l.kt)("li",{parentName:"ul"},"TypeScript alias for ",(0,l.kt)("inlineCode",{parentName:"li"},".GetContrastingColour")," in root namespace (previously only\nLuau).")),(0,l.kt)("h3",{id:"changed-2"},"Changed"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".GetContrastRatio")," and ",(0,l.kt)("inlineCode",{parentName:"li"},".GetContrastingColour")," now redirect to the ",(0,l.kt)("inlineCode",{parentName:"li"},"WCAG")," submodule."),(0,l.kt)("li",{parentName:"ul"},"Updated toolchain to use rojo 7; fixed other dependencies to an exact version.")),(0,l.kt)("h3",{id:"removed"},"Removed"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Removed ",(0,l.kt)("inlineCode",{parentName:"li"},"rotriever.toml")," to drop support for kayak and other rotriever-based\npackage managers.")),(0,l.kt)("h2",{id:"111"},"[1.1.1]"),(0,l.kt)("h3",{id:"added-3"},"Added"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Added ",(0,l.kt)("inlineCode",{parentName:"li"},".GetContrastingColour")," to adjust a forground colour to meet the minimum\ncontrast ratio against a background colour.")),(0,l.kt)("h2",{id:"110"},"[1.1.0]"),(0,l.kt)("h3",{id:"added-4"},"Added"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Added ",(0,l.kt)("inlineCode",{parentName:"li"},".GetPerceivedBrightness")," method to return a value representing colour visibility."),(0,l.kt)("li",{parentName:"ul"},"Implemented ",(0,l.kt)("inlineCode",{parentName:"li"},"Palette")," colour harmony and theming submodule.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Added ",(0,l.kt)("inlineCode",{parentName:"li"},".Analogous"),"."),(0,l.kt)("li",{parentName:"ul"},"Added ",(0,l.kt)("inlineCode",{parentName:"li"},".Complementary"),"."),(0,l.kt)("li",{parentName:"ul"},"Added ",(0,l.kt)("inlineCode",{parentName:"li"},".Monochromatic"),"."),(0,l.kt)("li",{parentName:"ul"},"Added ",(0,l.kt)("inlineCode",{parentName:"li"},".SplitComplementary"),"."),(0,l.kt)("li",{parentName:"ul"},"Added ",(0,l.kt)("inlineCode",{parentName:"li"},".Triadic"),"."),(0,l.kt)("li",{parentName:"ul"},"Added ",(0,l.kt)("inlineCode",{parentName:"li"},".Tetradic"),"."),(0,l.kt)("li",{parentName:"ul"},"Added ",(0,l.kt)("inlineCode",{parentName:"li"},".Vibrant"),".")))),(0,l.kt)("h2",{id:"103"},"[1.0.3]"),(0,l.kt)("h3",{id:"added-5"},"Added"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Added ",(0,l.kt)("inlineCode",{parentName:"li"},".Rotate")," method to rotate the hue of a ",(0,l.kt)("inlineCode",{parentName:"li"},"Color3"),"."),(0,l.kt)("li",{parentName:"ul"},"Implemented ",(0,l.kt)("inlineCode",{parentName:"li"},"Blend")," blending operations submodule.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Added ",(0,l.kt)("inlineCode",{parentName:"li"},".Burn"),"."),(0,l.kt)("li",{parentName:"ul"},"Added ",(0,l.kt)("inlineCode",{parentName:"li"},".Dodge"),"."),(0,l.kt)("li",{parentName:"ul"},"Added ",(0,l.kt)("inlineCode",{parentName:"li"},".Multiply"),"."),(0,l.kt)("li",{parentName:"ul"},"Added ",(0,l.kt)("inlineCode",{parentName:"li"},".Overlay"),"."),(0,l.kt)("li",{parentName:"ul"},"Added ",(0,l.kt)("inlineCode",{parentName:"li"},".Screen"),".")))),(0,l.kt)("h2",{id:"102"},"[1.0.2]"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Published to NPM.")),(0,l.kt)("h3",{id:"added-6"},"Added"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Added TypeScript typings for use with roblox-ts."),(0,l.kt)("li",{parentName:"ul"},"Added ",(0,l.kt)("inlineCode",{parentName:"li"},".Invert")," method to invert a ",(0,l.kt)("inlineCode",{parentName:"li"},"Color3"),"."),(0,l.kt)("li",{parentName:"ul"},"Added ",(0,l.kt)("inlineCode",{parentName:"li"},".isDark")," method to determine if a ",(0,l.kt)("inlineCode",{parentName:"li"},"Color3")," is dark."),(0,l.kt)("li",{parentName:"ul"},"Added ",(0,l.kt)("inlineCode",{parentName:"li"},".isLight")," method to determine if a ",(0,l.kt)("inlineCode",{parentName:"li"},"Color3")," is light.")),(0,l.kt)("h2",{id:"101"},"[1.0.1]"),(0,l.kt)("h3",{id:"added-7"},"Added"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Added ",(0,l.kt)("inlineCode",{parentName:"li"},"threshold")," as a third argument to ",(0,l.kt)("inlineCode",{parentName:"li"},"Emphasise"),".")))}p.isMDXComponent=!0}}]);